name: Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  PRODUCT: wayback

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ linux, freebsd, openbsd, dragonfly, windows, darwin ]
        arch: [ amd64, 386 ]
        include:
          - os: linux
            arch: arm
            arm: 5
          - os: linux
            arch: arm
            arm: 6
          - os: linux
            arch: arm
            arm: 7
          - os: linux
            arch: arm64
          - os: linux
            arch: mips
            mips: softfloat
          - os: linux
            arch: mips
            mips: hardfloat
          - os: linux
            arch: mipsle
            mipsle: softfloat
          - os: linux
            arch: mipsle
            mipsle: hardfloat
          - os: linux
            arch: mips64
          - os: linux
            arch: mips64le
          - os: linux
            arch: ppc64
          - os: linux
            arch: ppc64le
          - os: linux
            arch: s390x
          - os: windows
            arch: arm
          - os: android
            arch: arm64
          - os: darwin
            arch: arm64
          - os: freebsd
            arch: arm64
        exclude:
          - os: darwin
            arch: 386
          - os: dragonfly
            arch: 386
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
      GOARM: ${{ matrix.arm }}
      GOMIPS: ${{ matrix.mips }}
      GOMIPS64: ${{ matrix.mips64 }}
      GOMIPSLE: ${{ matrix.mipsle }}
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.17

    - name: Build fat binary
      id: builder
      run: |
        ARGS="${GOOS}-${GOARCH}"
        if [[ -n "${GOARM}" ]]; then
          ARGS="${ARGS}v${GOARM}"
        elif [[ -n "${GOMIPS}" ]]; then
          ARGS="${ARGS}-${GOMIPS}"
        elif [[ -n "${GOMIPS64}" ]]; then
          ARGS="${ARGS}-${GOMIPS64}"
        elif [[ -n "${GOMIPSLE}" ]]; then
          ARGS="${ARGS}-${GOMIPSLE}"
        fi
        make ${ARGS}
        echo "::set-output name=args::${ARGS}"

    - name: Archive binary
      run: make TARGET=${{ steps.builder.outputs.args }} releases

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: build/package/${{ env.PRODUCT }}*

  debpkg:
    name: Build DEB
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
            arm: 7
          - os: linux
            arch: arm64
    runs-on: ubuntu-latest
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
      GOARM: ${{ matrix.arm }}
    steps:
    - name: Check out codebase
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Build Debian package
      run: |
        OS_ARCH="${GOARCH}"
        PKG_ARCH="${GOARCH}"
        if [[ -n "${GOARM}" ]]; then
          PKG_ARCH="${PKG_ARCH}v${GOARM}"
          OS_ARCH="arm32v${GOARM}"
        fi
        if [[ "${OS_ARCH}" == "arm64" ]]; then
          OS_ARCH=arm64v8
        fi
        make debian DEB_IMG_ARCH=${OS_ARCH} PKG_ARCH=${PKG_ARCH}

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: build/package/${{ env.PRODUCT }}*.deb

  rpmpkg:
    name: Build RPM
    runs-on: ubuntu-latest
    steps:
    - name: Check out codebase
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Build RPM package
      run: make rpm

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: build/package/${{ env.PRODUCT }}*.rpm

  aurpkg:
    name: Build AUR
    runs-on: ubuntu-latest
    steps:
    - name: Check out code base
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Build AUR package
      run: |
        make submodule
        cd build/aur
        make volume

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: |
          build/aur/.SRCINFO
          build/aur/PKGBUILD
          build/aur/${{ env.PRODUCT }}*.pkg.tar.zst
        if-no-files-found: error

  snapcraft:
    name: Build Snap
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - amd64
    steps:
    - name: Check out code base
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set env & Print wayback version
      shell: bash
      run: |
        version=$(git describe --tags `git rev-list --tags --max-count=1` | sed -e 's/v//g')
        sed -i "s/version: 'git'/version: '${version}'/g" snapcraft.yaml

    - id: build
      name: Build snap
      uses: diddlesnaps/snapcraft-multiarch-action@v1
      with:
        architecture: ${{ matrix.platform }}
        snapcraft-channel: stable

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: ${{ steps.build.outputs.snap }}

  flatpak:
    name: Build Flatpak
    runs-on: ubuntu-latest
    steps:
    - name: Check out code base
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.17

    - name: Setup Flatpak
      run: |
        sudo apt-get -y -qq update
        sudo apt-get install -y flatpak flatpak-builder

    - name: Packaging flatpak
      run: |
        VERSION=$(git describe --tags `git rev-list --tags --max-count=1` | sed -e 's/v//g')
        BUNDLE="org.wabarc.wayback_${VERSION}_x86_64.flatpak"
        MANIFEST_PATH=$GITHUB_WORKSPACE/build/flatpak/org.wabarc.wayback.yml
        RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
        APP_ID="org.wabarc.wayback"
        BRANCH="master"

        flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        flatpak install -y --noninteractive flathub org.freedesktop.Platform//20.08 org.freedesktop.Sdk//20.08

        make build
        mv build/binary/wayback build/flatpak/wayback

        flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
        flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
        mv $GITHUB_WORKSPACE/org.wabarc.wayback_${VERSION}_x86_64.flatpak $GITHUB_WORKSPACE/org.wabarc.wayback-${VERSION}.x86_64.flatpak

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: org.wabarc.wayback-*.x86_64.flatpak

  checksum:
    name: Get archived packages checksum
    runs-on: ubuntu-latest
    needs: [ build, debpkg, rpmpkg, aurpkg, snapcraft, flatpak ]
    outputs:
      digest: ${{ steps.digest.outputs.result }}
    steps:
    - name: Download math result from build job
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: .

    - name: Create all binary digest
      id: digest
      run: |
        digest=$(find *${{ env.PRODUCT }}* -type f -exec sha256sum {} +)
        digest="${digest//$'%'/%25}"
        digest="${digest//$'\n'/%0A}"
        echo "::set-output name=result::$digest"

  release:
    name: Create and upload release
    runs-on: ubuntu-latest
    needs: [build, checksum]
    steps:
    - name: Check out code base
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Generate Git log
      run: |
        git fetch origin +refs/tags/*:refs/tags/*
        echo "Current Tag: ${GITHUB_REF}"
        git checkout ${GITHUB_REF} -b release-log
        GITVER=$(git describe --tags)
        PREVVER=$(git describe --tags --abbrev=0 ${GITVER}~1)
        git log --oneline ${PREVVER}..${GITVER} > gittaglogs.txt
        MORE=$(echo "See full [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/CHANGELOG.md)")
        echo -e "*Release ${GITVER}* #wayback\n" > release-note.md
        cut -c9- gittaglogs.txt | sed -e 's/^/- /' | sed -e 's/\"/\\"/g' >> release-note.md
        echo -e "\n${MORE}" | tee -a release-note.md gittaglogs.txt > /dev/null
        # Append digests
        echo '
        **Digests in this release:**

        ```
        ${{ needs.checksum.outputs.digest }}
        ```
        ' >> gittaglogs.txt

    - name: Upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: release-note
        path: release-note.md

    - name: Download math result from build and checksum jobs
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: ${{ env.PRODUCT }}

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        body_path: gittaglogs.txt
        files: ${{ env.PRODUCT }}/*${{ env.PRODUCT }}*
        prerelease: true
        draft: false

  release-apt:
    if: github.repository == 'wabarc/wayback'
    name: Release APT Repository
    runs-on: ubuntu-latest
    needs: [debpkg]
    steps:
    - name: Check out code base
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_PAT }}
        repository: 'wabarc/apt-repo'

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: ${{ env.PRODUCT }}

    - name: Import GPG key
      id: gpg
      uses: crazy-max/ghaction-import-gpg@v3
      with:
        gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: GPG user IDs
      run: |
        echo "fingerprint: ${{ steps.gpg.outputs.fingerprint }}"
        echo "keyid:       ${{ steps.gpg.outputs.keyid }}"
        echo "name:        ${{ steps.gpg.outputs.name }}"
        echo "email:       ${{ steps.gpg.outputs.email }}"
        gpg --armor --export-secret-keys > priv.asc

    - name: Build APT Repository
      if: ${{ steps.gpg.outputs.keyid != '' }}
      run: |
        cp ./${{ env.PRODUCT }}/*.deb .
        make build

    - name: Publish APT Repository
      if: ${{ steps.gpg.outputs.keyid != '' }}
      run: |
        git config --local user.name 'github-actions[bot]'
        git config --local user.email '41898282+github-actions[bot]@users.noreply.github.com'
        make publish
        rm -f priv.asc

  release-rpm:
    if: github.repository == 'wabarc/wayback'
    name: Release RPM Repository
    runs-on: ubuntu-latest
    needs: [rpmpkg]
    steps:
    - name: Check out code base
      uses: actions/checkout@v2
      with:
        token: ${{ secrets.GH_PAT }}
        repository: 'wabarc/rpm-repo'

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.PRODUCT }}
        path: ${{ env.PRODUCT }}

    - name: Build RPM Repository
      run: |
        cp ./${{ env.PRODUCT }}/*.rpm ./x86_64
        make build

    - name: Publish RPM Repository
      run: |
        git config --local user.name 'github-actions[bot]'
        git config --local user.email '41898282+github-actions[bot]@users.noreply.github.com'
        make publish

  notification:
    if: github.repository == 'wabarc/wayback'
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: release-note
        path: .

    - name: Send release note to Telegram channel
      continue-on-error: true
      run: |
        TEXT="$(cat release-note.md)"
        echo -e "${TEXT}"
        curl --silent --output /dev/null --show-error --fail -X POST \
             -H 'Content-Type: application/json' \
             -d '{"chat_id": "${{ secrets.TELEGRAM_TO }}", "text": "'"${TEXT}"'", "parse_mode": "markdown"}' \
             "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

  dispatch:
    if: github.repository == 'wabarc/wayback'
    name: Repository Dispatch
    runs-on: ubuntu-latest
    needs: [release]
    steps:
    - name: Dispatch repository in wabarc/aur
      uses: peter-evans/repository-dispatch@v1
      with:
        repository: wabarc/aur
        event-type: publish
        token: ${{ secrets.PAT_WORKFLOW }}
        client-payload: '{"from": "${{ github.repository }}", "channel": "stable"}'
