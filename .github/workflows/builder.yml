# Copyright 2020 Wayback Archiver. All rights reserved.
# Use of this source code is governed by the GNU GPL v3
# license that can be found in the LICENSE file.
#
name: Builder

on:
  push:
    branches: "*"
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
      - "Makefile"
      - "build/**"
      - ".github/workflows/builder.yml"
      - "snapcraft.yaml"
  pull_request:
    branches: "*"
    paths:
      - "**/*.go"
      - "go.mod"
      - "go.sum"
  workflow_dispatch:

env:
  PRODUCT: wayback

permissions: write-all

jobs:
  build:
    name: Build
    strategy:
      matrix:
        os: [ linux, freebsd, openbsd, dragonfly, windows, darwin ]
        arch: [ amd64, 386 ]
        include:
          - os: linux
            arch: arm
            arm: 5
          - os: linux
            arch: arm
            arm: 6
          - os: linux
            arch: arm
            arm: 7
          - os: linux
            arch: arm64
          - os: linux
            arch: mips
            mips: softfloat
          - os: linux
            arch: mips
            mips: hardfloat
          - os: linux
            arch: mipsle
            mipsle: softfloat
          - os: linux
            arch: mipsle
            mipsle: hardfloat
          - os: linux
            arch: mips64
          - os: linux
            arch: mips64le
          - os: linux
            arch: ppc64
          - os: linux
            arch: ppc64le
          - os: linux
            arch: s390x
          - os: windows
            arch: arm
          - os: windows
            arch: arm64
          - os: android
            arch: arm64
          - os: darwin
            arch: arm64
          - os: freebsd
            arch: arm64
        exclude:
          - os: darwin
            arch: 386
          - os: dragonfly
            arch: 386
      fail-fast: false
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      GOOS: ${{ matrix.os }}
      GOARCH: ${{ matrix.arch }}
      GOARM: ${{ matrix.arm }}
      GOMIPS: ${{ matrix.mips }}
      GOMIPS64: ${{ matrix.mips64 }}
      GOMIPSLE: ${{ matrix.mipsle }}
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: ^1.18

    - name: Check out code base
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check out code base
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Cache go module
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: ${{ runner.os }}-go-

    - name: Get dependencies
      run: |
        go get -v -t -d ./...

    - name: Build binary
      id: builder
      run: |
        ARGS="${GOOS}-${GOARCH}"
        if [[ -n "${GOARM}" ]]; then
          ARGS="${ARGS}v${GOARM}"
        elif [[ -n "${GOMIPS}" ]]; then
          ARGS="${ARGS}-${GOMIPS}"
        elif [[ -n "${GOMIPS64}" ]]; then
          ARGS="${ARGS}-${GOMIPS64}"
        elif [[ -n "${GOMIPSLE}" ]]; then
          ARGS="${ARGS}-${GOMIPSLE}"
        fi
        make ${ARGS}
        echo "::set-output name=filename::${{ env.PRODUCT }}-${ARGS}"

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.builder.outputs.filename }}
        path: ./build/binary/${{ env.PRODUCT }}*
        if-no-files-found: error

  debpkg:
    name: Build deb
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm32
            arm: 7
          - os: linux
            arch: arm64
            arm: 8
      fail-fast: false
    runs-on: ubuntu-latest
    continue-on-error: true
    env:
      GOARCH: ${{ matrix.arch }}
      GOARM: ${{ matrix.arm }}
    steps:
    - name: Check out code base
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check out code base
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Build Debian package
      id: builder
      run: |
        TARGET="${GOARCH}"
        if [[ -n "${GOARM}" ]]; then
          TARGET="${GOARCH}v${GOARM}"
        fi
        PKG_ARCH="${TARGET//v8}"
        PKG_ARCH="${PKG_ARCH//32}"
        make debian DEB_IMG_ARCH=${TARGET} PKG_ARCH=${PKG_ARCH}
        echo "::set-output name=filename::${{ env.PRODUCT }}-deb-${PKG_ARCH}"

    - name: Upload archived binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.builder.outputs.filename }}
        path: build/package/${{ env.PRODUCT }}*.deb
        if-no-files-found: error

  rpmpkg:
    name: Build RPM
    runs-on: ubuntu-latest
    steps:
    - name: Check out code base
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check out code base
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Build RPM package
      run: make rpm

    - name: Upload archived binary
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT }}-rpm
        path: build/package/${{ env.PRODUCT }}*.rpm
        if-no-files-found: error

  aurpkg:
    name: Build AUR
    runs-on: ubuntu-latest
    steps:
    - name: Check out code base
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true

    - name: Check out code base
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Build AUR package
      run: |
        make submodule
        cd build/aur
        make volume

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT }}-aur
        path: |
          build/aur/.SRCINFO
          build/aur/PKGBUILD
          build/aur/${{ env.PRODUCT }}*.pkg.tar.zst
        if-no-files-found: error

  snapcraft:
    name: Build Snap
    runs-on: ubuntu-latest
    steps:
    - name: Check out code base
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check out code base
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - id: build
      name: Build Snap
      uses: snapcore/action-build@v1
      with:
        snapcraft-channel: edge

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT }}-snap
        path: ${{ steps.build.outputs.snap }}

    - name: Install snap
      shell: bash
      run: |
        sudo snap install --dangerous ${{ steps.build.outputs.snap }}
        wayback --help

    - name: Release Snap
      uses: snapcore/action-publish@v1
      if: github.repository == 'wabarc/wayback' && github.event_name == 'push'
      with:
        store_login: ${{ secrets.SNAPCRAFT_TOKEN }}
        snap: ${{ steps.build.outputs.snap }}
        release: edge

  flatpak:
    name: Build Flatpak
    runs-on: ubuntu-latest
    steps:
    - name: Check out code base
      if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Check out code base
      if: github.event_name == 'pull_request'
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: ^1.18

    - name: Setup Flatpak
      run: |
        sudo apt-get -y -qq update
        sudo apt-get install -y flatpak flatpak-builder

    - name: Packaging flatpak
      run: |
        VERSION=edge
        BUNDLE="org.wabarc.wayback_${VERSION}_x86_64.flatpak"
        MANIFEST_PATH=$GITHUB_WORKSPACE/build/flatpak/org.wabarc.wayback.yml
        RUNTIME_REPO="https://flathub.org/repo/flathub.flatpakrepo"
        APP_ID="org.wabarc.wayback"
        BRANCH="master"

        flatpak remote-add --user --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
        flatpak install -y --noninteractive flathub org.freedesktop.Platform//20.08 org.freedesktop.Sdk//20.08

        make build
        mv build/binary/wayback build/flatpak/wayback

        flatpak-builder --user --disable-rofiles-fuse --repo=repo --force-clean flatpak_app ${MANIFEST_PATH} --install-deps-from=flathub
        flatpak build-bundle repo ${BUNDLE} --runtime-repo=${RUNTIME_REPO} ${APP_ID} ${BRANCH}
        mv $GITHUB_WORKSPACE/org.wabarc.wayback_${VERSION}_x86_64.flatpak $GITHUB_WORKSPACE/org.wabarc.wayback-${VERSION}.x86_64.flatpak

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.PRODUCT }}-flatpak
        path: org.wabarc.wayback-*.x86_64.flatpak
