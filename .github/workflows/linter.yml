# Copyright 2020 Wayback Archiver. All rights reserved.
# Use of this source code is governed by the GNU GPL v3
# license that can be found in the LICENSE file.
#
name: Linter

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read

jobs:
  super-linter:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code base
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out code base
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Lint Code Base
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: 'main'
          VALIDATE_MARKDOWN: true
          VALIDATE_DOCKERFILE: true
          VALIDATE_BASH: true
          VALIDATE_BASH_EXEC: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  golangci:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code base
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out code base
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: ^1.18

      - name: Golang linter
        uses: golangci/golangci-lint-action@537aa1903e5d359d0b27dbc19ddd22c5087f3fbc # v3.2.0
        with:
          version: v1.49
          # Optional: golangci-lint command line arguments.
          args: --timeout=5m
          # Optional: show only new issues if it's a pull request. The default value is `false`.
          only-new-issues: true

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code base
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out code base
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run shellcheck with reviewdog
        uses: reviewdog/action-shellcheck@66c9a47bf02255b250284a82251cb4cadf5043f5 # v1.15.0

  misspell:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code base
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out code base
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run misspell with reviewdog
        uses: reviewdog/action-misspell@811b1e15f531430be3a5784e3d591bd657df18b0 # v1.12.2

  alex:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code base
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check out code base
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Run alex with reviewdog
        uses: reviewdog/action-alex@ba00276838ef57db30fc418f906a09ea79f25efc # v1.5.0

  goreportcard:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Run Go report card
        run: |
          path=$(curl -sf -X POST -F "repo=github.com/$GITHUB_REPOSITORY" https://goreportcard.com/checks | jq -r '.redirect')
          echo -e "\nSee report for https://goreportcard.com${path}"
